pipeline {
    agent {
        node{
            label 'maven'
        }
    }
    environment {
        PATH = "/opt/apache-maven-3.8.1/bin:$PATH"
        scannerHome = tool 'sonarqube';
    }

    stages {

        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }

        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh '${scannerHome}/bin/sonar-scanner'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Upload to Jfrog Artifactory') {
            steps {
                script {
                    def server = Artifactory.newServer url: 'https://yjtan0819.jfrog.io/', credentialsId: 'artifactory'
                    def buildInfo = Artifactory.newBuildInfo()
                    def rtMaven = Artifactory.newMavenBuild()
                    rtMaven.tool = 'maven'
                    rtMaven.deployer server: server, releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local'
                    buildInfo.env.capture = true
                    buildInfo.env.filter.addInclude('MAVEN_.*')
                    rtMaven.run pom: 'pom.xml', goals: 'clean install', buildInfo: buildInfo
                    server.publishBuildInfo buildInfo
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    docker.build("yjtan0819/simple-java-maven-app:${env.BUILD_ID}")
                }
            }
        }

        stage('Docker Push to Artifactory') {
            steps {
                script {
                    def artifactoryName = 'devops' // The Artifactory instance name configured in Jenkins
                    def dockerBuildInfo = rtDocker.build(image: "yjtan0819/simple-java-maven-app:${env.BUILD_ID}", dockerfile: '.')
                    rtDocker.push(
                        serverId: artifactoryName, 
                        image: "yjtan0819/simple-java-maven-app:${env.BUILD_ID}", 
                        targetRepo: 'devops-fullstack-docker-local'
                    )
                    rtPublishBuildInfo (
                        serverId: artifactoryName,
                        buildInfo: dockerBuildInfo
                    )
                }
            }
        }

        stage(" Deploy using Helm") {
            steps {
                script {
                    echo '<--------------- Helm Deploy Started --------------->'
                    sh 'helm install simple-java-maven-app simple-java-maven-app-1.0.tgz'
                    echo '<--------------- Helm deploy Ends --------------->'
                }
            }
        }
    }
}
